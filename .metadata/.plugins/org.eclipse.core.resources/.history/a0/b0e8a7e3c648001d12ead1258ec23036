/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "tim.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "software_timer.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
// Delay time
#define	DELAY_TIME			10 // 10ms delay

// Number of 7SEG LEDs
#define MAX_LED 			4

// Seven segment
#define NUM_OF_7SEG_VALUES	10

// Counter max value
#define COUNTER_MAX			255 // 8-bit counter

// Number display on each LED
#define LED_1_DISPLAY 		1
#define LED_2_DISPLAY 		2
#define LED_3_DISPLAY 		3
#define LED_4_DISPLAY 		0
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
const uint8_t sevenSegValue[NUM_OF_7SEG_VALUES] = {
	0x40, // 0
	0x79, // 1
	0x24, // 2
	0x30, // 3
	0x19, // 4
	0x12, // 5
	0x02, // 6
	0x78, // 7
	0x00, // 8
	0x10, // 9
};

const uint8_t sevenSegEnable[MAX_LED] = {
	0x0e, // EN0
	0x0d, // EN1
	0x0b, // EN2
	0x07  // EN3
};

int led_buffer[MAX_LED] = {2, 0, 0, 2};

static int led_index = 0;
static int second = 20, minute = 32, hour = 14;
static int switchPeriod = 250; // in ms
static int dotPeriod = 500; // in ms
static int oneSecond = 1000; // in ms
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void setupDelay(void);
void toggleDot(void);
void display7SEG(int num);
void enable7SEG(int num);
void update7SEG(int index);
void updateClockBuffer();
void exercise1(void);
void exercise2(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void setupDelay(void) {
	if(DELAY_TIME) {
		switchPeriod /= DELAY_TIME;
		dotPeriod /= DELAY_TIME;
		oneSecond /= DELAY_TIME;
	}
}

void toggleDot() {
	HAL_GPIO_TogglePin(DOT_GPIO_Port, DOT_Pin);
}

void display7SEG(int num) {
	uint8_t index = 0;
	HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, (sevenSegValue[num] >> index++) & 0x01);
	HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, (sevenSegValue[num] >> index++) & 0x01);
	HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, (sevenSegValue[num] >> index++) & 0x01);
	HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, (sevenSegValue[num] >> index++) & 0x01);
	HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, (sevenSegValue[num] >> index++) & 0x01);
	HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, (sevenSegValue[num] >> index++) & 0x01);
	HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, (sevenSegValue[num] >> index) & 0x01);
}

void enable7SEG(int num) {
	uint8_t index = 0;
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, (sevenSegEnable[num] >> index++) & 0x01);
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, (sevenSegEnable[num] >> index++) & 0x01);
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, (sevenSegEnable[num] >> index++) & 0x01);
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, (sevenSegEnable[num] >> index) & 0x01);
}

void update7SEG(int index) {
	switch(index) {
	case 0:
		enable7SEG(index);
		display7SEG(led_buffer[index]);
		break;
	case 1:
		enable7SEG(index);
		display7SEG(led_buffer[index]);
		break;
	case 2:
		enable7SEG(index);
		display7SEG(led_buffer[index]);
		break;
	case 3:
		enable7SEG(index);
		display7SEG(led_buffer[index]);
		break;
	default: break;
	}
}

void updateClockBuffer(void) {
	led_buffer[0] = hour / 10;
	led_buffer[1] = hour % 10;
	led_buffer[2] = minute / 10;
	led_buffer[3] = minute % 10;
}

void exercise1(void) {
	switch(led_index) {
	case 0:
		enable7SEG(led_index);
		display7SEG(LED_1_DISPLAY);
		led_index = 1;
		break;
	case 1:
		enable7SEG(led_index);
		display7SEG(LED_2_DISPLAY);
		led_index = 0;
		break;
	default: break;
	}
}

void exercise2(void) {
	switch(led_index) {
	case 0:
		enable7SEG(led_index);
		display7SEG(LED_1_DISPLAY);
		led_index = 1;
		break;
	case 1:
		enable7SEG(led_index);
		display7SEG(LED_2_DISPLAY);
		led_index = 2;
		break;
	case 2:
		enable7SEG(led_index);
		display7SEG(LED_3_DISPLAY);
		led_index = 3;
		break;
	case 3:
		enable7SEG(led_index);
		display7SEG(LED_4_DISPLAY);
		led_index = 0;
		break;
	default: break;
	}
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */
  setupDelay();
  setTimer1(1);
  setTimer2(2);
  setTimer3(3);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if(timer1_flag == 1) {
    	setTimer1(switchPeriod);
    	update7SEG(led_index++);
    	led_index %= MAX_LED;
    }

    if(timer2_flag == 1) {
    	setTimer2(dotPeriod);
    	toggleDot();
    }

    if(timer3_flag == 1) {
    	setTimer3(oneSecond);
    	second++;
    	if(second >= 60) {
    		second = 0;
    		minute++;
    	}
    	if(minute >= 60) {
    		minute = 0;
    		hour++;
    	}
    	hour %= 24;
    	updateClockBuffer();
    }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	timerRun();
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
